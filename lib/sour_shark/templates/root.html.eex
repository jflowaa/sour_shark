<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>
    <%= Application.get_env(:sour_shark, :product_name) %>
  </title>
  <% css_version = :rand.uniform(1_000_000) %>
  <link href="/css/app.css?v=<%= css_version %>" rel="stylesheet">
  <link rel="alternate" type="application/rss+xml" title="RSS" href="/rss.xml" />
  <%= @extra_head %>
  <%= @hot_reload %>
</head>

<body class="min-h-screen">
  <header class="border-b border-base-300">
    <div class="navbar bg-base-100">
      <!-- Mobile menu trigger -->
      <div class="navbar-start gap-2">
        <div class="dropdown md:hidden">
          <div tabindex="0" role="button" class="btn btn-ghost btn-square" aria-label="Open navigation menu">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </div>
          <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
            <li><a href="/projects">Projects</a></li>
            <li><a href="/about">About</a></li>
            <li><a href="https://github.com/jflowaa/sour_shark">Source Code</a></li>
          </ul>
        </div>
        <a href="/" class="btn btn-ghost text-xl font-semibold">
          <%= Application.get_env(:sour_shark, :product_name) %>
        </a>
      </div>

      <div class="navbar-end gap-3">
        <!-- Hide these links on mobile; show from md breakpoint upward -->
        <a href="/projects" class="hidden md:inline-flex">Projects</a>
        <a href="/about" class="hidden md:inline-flex">About</a>
        <a href="https://github.com/jflowaa/sour_shark" class="btn btn-primary btn-sm normal-case hidden md:inline-flex">Source Code &rarr;</a>
        <!-- Theme selector -->
        <div class="dropdown dropdown-end">
          <div tabindex="0" role="button" class="btn btn-ghost btn-sm gap-1" aria-label="Theme menu" id="theme-menu-trigger">
            <span id="theme-icon" aria-hidden="true" class="h-5 w-5 inline-block"></span>
            <span id="theme-current" class="hidden md:inline text-xs"></span>
          </div>
          <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-40">
            <li><button type="button" data-theme-choice="system">System</button></li>
            <li><button type="button" data-theme-choice="light">Light</button></li>
            <li><button type="button" data-theme-choice="dark">Dark</button></li>
          </ul>
        </div>
      </div>
    </div>
  </header>

  <main class="container mx-auto p-4">
    <div class="prose max-w-none">
      <%= @content %>
    </div>
  </main>

  <script>
    (function () {
      const STORAGE_KEY = 'theme';
      const root = document.documentElement; // uses :root for daisyUI theme variables
      const themeCurrentEl = document.getElementById('theme-current');
      const themeIconEl = document.getElementById('theme-icon');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');

      const icons = {
        light: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5"><circle cx="12" cy="12" r="4"/><path d="M12 2v2m0 16v2M4.93 4.93l1.41 1.41M16.66 16.66l1.41 1.41M2 12h2m16 0h2M6.34 17.66l1.41-1.41M17.66 6.34l1.41-1.41"/></svg>',
        dark: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-5 w-5"><path d="M21 12.79A9 9 0 1111.21 3a7 7 0 009.79 9.79z"/></svg>'
      };

      function storedTheme() {
        return localStorage.getItem(STORAGE_KEY);
      }

      function applyTheme(theme) {
        if (theme === 'light' || theme === 'dark') {
          // map logical 'dark' to daisyUI 'dim'
          root.setAttribute('data-theme', theme === 'dark' ? 'dim' : 'light');
        } else {
          root.removeAttribute('data-theme'); // fall back to system via daisyUI config
        }
        updateLabel();
        updateIcon();
      }

      function effectiveTheme() {
        const saved = storedTheme();
        if (saved === 'light' || saved === 'dark') return saved;
        return prefersDark.matches ? 'dark' : 'light';
      }

      function updateLabel() {
        if (!themeCurrentEl) return;
        const saved = storedTheme();
        if (saved === 'light' || saved === 'dark') {
          themeCurrentEl.textContent = saved.charAt(0).toUpperCase() + saved.slice(1);
        } else {
          themeCurrentEl.textContent = prefersDark.matches ? 'System (Dark)' : 'System (Light)';
        }
      }

      function updateIcon() {
        if (!themeIconEl) return;
        themeIconEl.innerHTML = icons[effectiveTheme()];
      }

      function setTheme(choice) {
        if (choice === 'light' || choice === 'dark') {
          localStorage.setItem(STORAGE_KEY, choice);
          applyTheme(choice);
        } else { // system
          localStorage.removeItem(STORAGE_KEY);
          applyTheme(null);
        }
      }

      // Apply on load
      applyTheme(storedTheme());
      updateLabel();
      updateIcon();

      // Update when system preference changes and user is on system mode
      prefersDark.addEventListener('change', () => {
        if (!storedTheme()) {
          applyTheme(null);
        } else {
          updateIcon();
        }
      });

      // Delegate clicks from dropdown
      document.addEventListener('click', (e) => {
        const target = e.target;
        if (target instanceof HTMLElement) {
          const choice = target.getAttribute('data-theme-choice');
          if (choice) {
            setTheme(choice);
          }
        }
      });
    })();
  </script>
</body>

</html>
